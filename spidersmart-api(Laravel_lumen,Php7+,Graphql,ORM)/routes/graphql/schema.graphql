#import ./center.graphql
#import ./user.graphql
#import ./assignment.graphql
#import ./submission.graphql
#import ./enrollment.graphql
#import ./author.graphql
#import ./publisher.graphql
#import ./genre.graphql
#import ./level.graphql
#import ./subject.graphql
#import ./book.graphql
#import ./teacher.graphql

scalar DateTime @scalar(class: "DateTime")
scalar Upload @scalar(class: "Upload")
scalar Any @scalar(class: "Any")

interface Resource {
  id: Int!
  dateFrom: DateTime
  dateTo: DateTime
  __typename: String
}

interface RelateableResource {
  id: Int!
  dateFrom: DateTime
  dateTo: DateTime
  relatedFrom: DateTime
  relatedTo: DateTime
  __typename: String
}

interface ResponsePayload {
  success: Boolean
  errors: [String]
  data: Any
}

interface CollectionResponsePayload {
  data: Any
  errors: [String]
  metadata: QueryMetaData
}

type Query {
  healthcheck: Boolean
}

type Mutation {
  healthcheck: Boolean
}

type QueryMetaData {
  count: Int
  queryOptions: QueryOptions
}

type QueryFilter {
  field: String!
  comparison: String
  comparisonMode: String
  value: String
  values: [String]
}

type QuerySort {
  field: String!
  direction: String!
}

type QueryPaginate {
  size: Int!
  start: Int!
}

type QueryOptions {
  filters: [QueryFilter]
  sort: QuerySort
  page: QueryPaginate
}

input QueryFilterInput {
  field: String!
  comparison: String
  comparisonMode: String
  value: String
  values: [String]
}

input QuerySortInput {
  field: String!
  direction: String!
}

input QueryPaginateInput {
  size: Int!
  start: Int!
}

input QueryOptionsInput {
  filters: [QueryFilterInput]
  sort: QuerySortInput
  page: QueryPaginateInput
}